directive @cacheControl(inheritMaxAge: Boolean, maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

scalar AccountNumber

type AuthenticatedUser {
  accessToken: String!
  email: String!
}

scalar BigInt

scalar Byte

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

scalar CountryCode

input CreateCategoryCustomInput {
  categoryDefaultId: ObjectID
  description: String!
  iconProperties: IconPropertiesInput!
  transactionGroupId: ObjectID!
  type: TransactionCategoryTypeEnum!
}

input CreateCategoryDefaultInput {
  description: String!
  iconProperties: IconPropertiesInput!
  type: TransactionCategoryTypeEnum!
}

input CreateTransactionGroupInput {
  description: String!
  iconProperties: IconPropertiesInput!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

type CreditCard {
  _id: ObjectID!
  description: String!
  transactionGroupId: ObjectID!
}

input CreditCardInput {
  description: String!
  transactionGroupId: ObjectID!
}

scalar Currency

scalar Cursor

scalar DID

scalar Date

scalar DateTime

scalar Duration

scalar EmailAddress

scalar GUID

scalar HSL

scalar HSLA

scalar HexColorCode

scalar Hexadecimal

scalar IBAN

scalar IPv4

scalar IPv6

scalar ISBN

scalar ISO8601Duration

type IconProperties {
  background: String!
  color: String!
  icon: String!
}

input IconPropertiesInput {
  background: String!
  color: String!
  icon: String!
}

type Installments {
  current: Int!
  total: Int!
}

scalar JSON

scalar JSONObject

scalar JWT

scalar Latitude

scalar LocalDate

scalar LocalEndTime

scalar LocalTime

scalar Locale

scalar Long

scalar Longitude

scalar MAC

type Mutation {
  createCategory(input: CreateCategoryCustomInput!): TransactionCategory!
  createCreditCard(input: CreditCardInput!): CreditCard!
  createTransaction(input: TransactionInput!): [Transaction!]!
  createTransactionGroup(input: CreateTransactionGroupInput!): TransactionGroup!
  createUser(input: CreateUserInput!): Boolean!
  deleteCategory(_id: ObjectID!, groupId: ObjectID!): Boolean
  deleteCreditCard(_id: ObjectID!): Boolean
  deleteTransaction(_id: ObjectID!): Boolean!
  deleteTransactionGroup(_id: ObjectID!): Boolean!
  forgotPassword(email: String!): Boolean!
  loginWithCredentials(email: String!, password: String!): AuthenticatedUser!
  now: BigInt
  resetPassword(password: String!, token: String!): Boolean!
  updateCategory(_id: ObjectID!, input: UpdateCustomInput!): TransactionCategory!
  updateCreditCard(_id: ObjectID!, input: CreditCardInput!): CreditCard!
  updateTransaction(_id: ObjectID!, input: TransactionInput!): Transaction
  updateTransactionGroup(_id: ObjectID!, input: UpdateTransactionGroupInput!): TransactionGroup!
}

scalar NegativeFloat

scalar NegativeInt

scalar NonEmptyString

scalar NonNegativeFloat

scalar NonNegativeInt

scalar NonPositiveFloat

scalar NonPositiveInt

scalar ObjectID

type ObjectKeyValue {
  key: String!
  value: String!
}

input ObjectKeyValueInput {
  key: String!
  value: String!
}

type PageInfo {
  cursor: Cursor
  hasNextPage: Boolean!
  totalCount: Int!
}

scalar PhoneNumber

scalar Port

scalar PositiveFloat

scalar PositiveInt

scalar PostalCode

type Query {
  cardCategorySpending(filterByEndMonth: Date, filterByStartMonth: Date, groupId: ObjectID!): [TransactionsCardCategorySpending!]!
  categoriesByGroupId(transactionGroupId: ObjectID!): [TransactionCategory!]!
  categoryById(categoryId: ObjectID!): TransactionCategory
  creditCardByGroupId(transactionGroupId: ObjectID!): [CreditCard!]!
  creditCardById(_id: ObjectID!): CreditCard
  monthlyRevenueVsExpenses(filterByEndMonth: Date, filterByStartMonth: Date, groupId: ObjectID!): [TransactionsChart!]!
  monthlySpendingByCategory(filterByEndMonth: Date, filterByStartMonth: Date, groupId: ObjectID!): [TransactionsByCategoryChart!]!
  now: BigInt
  transactionById(_id: ObjectID!): Transaction
  transactionGroupById(_id: ObjectID): TransactionGroup
  transactionTotals(filterByCategoryId: ObjectID, filterByPeriod: Date!, filterBySearch: String, groupId: ObjectID!): TransactionsTotals
  transactions(cursor: Cursor, filterByCategoryId: ObjectID, filterByPeriod: Date!, filterBySearch: String, groupId: ObjectID!, limit: Int = 50): TransactionDetailsPagination!
  transactionsGroup(search: String): [TransactionGroup!]!
  viewer: Viewer
}

scalar RGB

scalar RGBA

scalar RoutingNumber

scalar SafeInt

scalar Time

scalar TimeZone

scalar Timestamp

type Transaction {
  _id: ObjectID!
  amount: Float!
  category: TransactionCategory!
  creditCard: CreditCard
  date: Date!
  description: String!
  installments: Installments
  isRecurringPayment: Boolean!
  transactionGroupId: ObjectID!
}

type TransactionCategory {
  _id: ObjectID!
  description: String!
  iconProperties: IconProperties!
  isDefault: Boolean!
  type: TransactionCategoryTypeEnum!
}

enum TransactionCategoryTypeEnum {
  EARNINGS
  EXPENSES
}

type TransactionDetailsPagination {
  nodes: [Transaction!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TransactionGroup {
  _id: ObjectID!
  description: String!
  iconProperties: IconProperties!
  owner: User!
}

type TransactionGrouped {
  groupBy: ObjectID!
  nodes: [Transaction!]!
}

type TransactionGroupedDetailsPagination {
  groups: [TransactionGrouped!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TransactionInput {
  amount: Float!
  categoryId: ObjectID!
  creditCardId: ObjectID
  date: Date!
  description: String!
  installmentCount: Int
  isRecurringPayment: Boolean!
  transactionGroupId: ObjectID!
}

type TransactionsByCategoryChart {
  amount: Float!
  category: TransactionCategory!
  reportDate: Date!
  transactions: [Transaction!]
}

type TransactionsCardCategorySpending {
  amount: Float!
  category: TransactionCategory!
  creditCard: CreditCard!
  reportDate: Date!
  transactions: [Transaction!]
}

type TransactionsChart {
  expense: Float!
  reportDate: Date!
  revenue: Float!
  transactions: [Transaction!]!
}

type TransactionsGroupedByCategoryPagination {
  groupBy: ObjectID!
  nodes: [Transaction!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TransactionsTotalize {
  percentageVariation: Float!
  total: Float!
}

type TransactionsTotals {
  balance: TransactionsTotalize!
  expense: TransactionsTotalize!
  revenue: TransactionsTotalize!
}

scalar URL

scalar USCurrency

scalar UUID

scalar UnsignedFloat

scalar UnsignedInt

input UpdateCustomInput {
  categoryDefaultId: ObjectID
  description: String!
  iconProperties: IconPropertiesInput!
  transactionGroupId: ObjectID!
  type: TransactionCategoryTypeEnum!
}

input UpdateTransactionGroupInput {
  description: String!
  iconProperties: IconPropertiesInput!
}

type User {
  _id: ObjectID!
  email: String!
  name: String!
}

scalar UtcOffset

type Viewer {
  _id: ObjectID!
  email: String!
  name: String!
}

scalar Void